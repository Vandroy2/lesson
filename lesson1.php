<?php

/* $age = 20;
$name = 'Vasya';
$surname = 'Mentovich';

if ($age < 24 and $name != 'Vasya' or $surname  = 'Mentovich') {
 echo 'Go away';
}

else 
echo 'come in';
echo '<br>';
echo '<hr>';


for ($i=1; $i < 10 ; $i++) { 
   echo 'Hello';
   echo '<hr>';
   echo '<br>';
}

for ($i=0; $i <10 ; $i++) { 
  echo $i . ' ';
  if($i % 2 == 0){
    echo 'четное число';
    echo '<hr>';
     echo '<br>';
  }
  else echo 'нечетное число';
  echo '<hr>';
   echo '<br>';
}

$name = array(
  'john',
  'Stan',
  'Vasya',
  'Alex',
);

foreach ($name as $value) {
echo $value;
  echo '<hr>';
  echo '<br>';
} */

/* $numbers = array(5,10,25,50);

foreach ($numbers as $num) {
  
  echo 'квадрат числа'. ' '. $num. ':'.($num * $num);
  echo '<hr>';
  echo '<br>';
  
  # code...
} */

/* function myfunction($a, $b){
 if ($a > $b) {
  echo $a;
  }
  else echo $b;
}

myfunction(10,20); */

#------------------------------------------------------------------------

// abs, 
// round, округление
// ceil, округление в большую сторону
// floor, округление в меньшую сторону
// rand, получение рандомного числа 
// min, получение минимального значения
// max получение максимального значения

 #---------------------------------------------------------------------
// ООП

// 1. Класс должен описывать только 1 объект
// 2. Имя у класса должно быть простое и понятное
// 3.Имя класса не должно быть глаголом
// 4. Имя должно описывать то, что делает класс
// 5. Интерфейс класса должен быть понятен


// 1.Метод - это функция, то есть действие
// 2. Метод существует только внутри класса
// 3.Класс состоит из 2-х составляющих : дфнные и методы

// Виды методов

// 1.Метод экземпляра (вызывается из объекта)
// 2.Статический метод(нельзя вызвать из объекта, вызывается только из класса)
// 3.Конструктор(обязательно должен быть статическим методом)
// 4.getter/setter (устанавливают и получают значения переменных)
// 5.Абстракные методы(можно переопределять в наследникахюРеализация отсутствует.
// Весть класс считается абстрактным если у него есть хотя бы 1 абстрактный метод )


// 1.Методы не должны быть сложными
// 2.Имя метода должно быть понятным
// 3.Имя метода должо содержать глагол
// 4.Все параметры методы должны выполняться
// 5.Входящие данные нужно проверять

// Наследование

// 1. Подкласс должен являтья болле специализированной версией суперкласса
// 2. Множественное наследование - опасный инструмент


// Инкапсуляция - возможность скрыть нужные методыб защитить скрытые методы от пользователя.
// Принцип инкапсуляции- это принцип черного ящика.Получить доступ к которому можно только  с помощью интерфейса.
// Методы инкапсуляции это модификаторы доступа

// 1. Public - полностью открыт.Является публичным
// 2. Protected - ограничивает доступ из других классов.Возможен доступ только из дочернего класса
// 3. Private - возможен доступ только внутри класса
// 4.Переменные класса лолжны быть закрыты

// Полиморфизм - методы с одинаковым названием, но с различными функциями


